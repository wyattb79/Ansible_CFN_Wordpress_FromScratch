AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Wordpress example from scratch

Parameters:
  KeyName:
    Description: Name of the KeyPair to use
    Type: 'AWS::EC2::KeyPair::KeyName'
  ProjectName:
    Description: Name of the project
    Type: String
  WebserverInstanceType:
    Description: EC2 Instance Type for the webserver
    Type: String
    Default: t2.micro
  MyIP:
    Description: IP address to allow traffic from
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e
  VpcCidrBlock:
    Description: CIDR block to allocate for the VPC
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e
  Ec2CidrBlock1:
    Description: CIDR block to allocate for the ec2 subnet1
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e
  Ec2CidrBlock2:
    Description: CIDR block to allocate for the ec2 subnet2
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e
  Rds1SubnetCidr:
    Description: CIDR block to allocate for the rds 1st az subnet
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e
  Rds2SubnetCidr:
    Description: CIDR block to allocate for the rds 2nd az subnet
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e

Resources:
  WordpressVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
  WordpressIgw:
    Type: AWS::EC2::InternetGateway
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !GetAtt WordpressIgw.InternetGatewayId
      VpcId: !GetAtt WordpressVpc.VpcId
  Ec2Subnet1:
    Type: AWS::EC2::Subnet
    DependsOn: WordpressVpc
    Properties:
      VpcId: !GetAtt WordpressVpc.VpcId
      CidrBlock: !Ref Ec2CidrBlock1
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: "true"
  Ec2Subnet2:
    Type: AWS::EC2::Subnet
    DependsOn: WordpressVpc
    Properties:
      VpcId: !GetAtt WordpressVpc.VpcId
      CidrBlock: !Ref Ec2CidrBlock2
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: "true"
  RDSSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: WordpressVpc
    Properties:
      VpcId: !GetAtt WordpressVpc.VpcId
      CidrBlock: !Ref Rds1SubnetCidr
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: "false"
  RDSSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: WordpressVpc
    Properties:
      VpcId: !GetAtt WordpressVpc.VpcId
      CidrBlock: !Ref Rds2SubnetCidr
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: "false"
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn:
      - RDSSubnet1
      - RDSSubnet2
    Properties:
      DBSubnetGroupDescription: "{{ ProjectName }}"
      SubnetIds:
        - !GetAtt RDSSubnet1.SubnetId
        - !GetAtt RDSSubnet2.SubnetId
  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: WordpressVpc
    Properties:
      GroupDescription: Allow ssh to instance
      VpcId: !Ref WordpressVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: WebserverSecurityGroup
    Properties:
      GroupDescription: Allow traffic to DB from WebserverSecurityGroup
      VpcId: !Ref WordpressVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref MyIP
  DBSecurityGroupSelfRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: DBSecurityGroup
    Properties:
      GroupId: !GetAtt DBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt DBSecurityGroup.GroupId
  WordpressLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: IgwAttachment
    Properties:
      Subnets: [ !GetAtt Ec2Subnet1.SubnetId, !GetAtt Ec2Subnet2.SubnetId ]
  WordpressALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /wordpress/wp-admin/install.php
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !GetAtt WordpressVpc.VpcId
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 30
