AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Wordpress example from scratch

Parameters:
  KeyName:
    Description: Name of the KeyPair to use
    Type: 'AWS::EC2::KeyPair::KeyName'
  WebserverInstanceType:
    Description: EC2 Instance Type for the webserver
    Type: String
    Default: t2.micro
  MyIP:
    Description: IP address to allow traffic from
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e
  VpcCidrBlock:
    Description: CIDR block to allocate for the VPC
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e
  Ec2CidrBlock:
    Description: CIDR block to allocate for the ec2 subnet
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e
  Rds1SubnetCidr:
    Description: CIDR block to allocate for the rds 1st az subnet
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e
  Rds2SubnetCidr:
    Description: CIDR block to allocate for the rds 2nd az subnet
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: CIDR range a.b.c.d/e

Resources:
  WordpressVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: "{{ project_name }}"
  Ec2Subnet:
    Type: AWS::EC2::Subnet
    DependsOn: WordpressVpc
    Properties:
      VpcId: !GetAtt WordpressVpc.VpcId
      CidrBlock: !Ref Ec2CidrBlock
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: "{{ project_name }}"
  RDSSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: WordpressVpc
    Properties:
      VpcId: !GetAtt WordpressVpc.VpcId
      CidrBlock: !Ref Rds1SubnetCidr
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: "{{ project_name }}"
  RDSSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: WordpressVpc
    Properties:
      VpcId: !GetAtt WordpressVpc.VpcId
      CidrBlock: !Ref Rds2SubnetCidr
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: "{{ project_name }}"
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn:
      - RDSSubnet1
      - RDSSubnet2
    Properties:
      DBSubnetGroupDescription: "{{ project_name }}"
      SubnetIds:
        - !GetAtt RDSSubnet1.SubnetId
        - !GetAtt RDSSubnet2.SubnetId
      Tags:
        - Key: Name
          Value: "{{ project_name }}"
  LoginSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: WordpressVpc
    Properties:
      GroupDescription: Allow ssh to instance
      VpcId: !Ref WordpressVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP
      Tags:
        - Key: Name
          Value: "{{ project_name }}"
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: LoginSecurityGroup
    Properties:
      GroupDescription: Allow traffic to DB from LoginSecurityGroup
      VpcId: !Ref WordpressVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref MyIP
      Tags:
        - Key: Name
          Value: "{{ project_name }}"
  WebServer:
    Type: AWS::EC2::Instance

